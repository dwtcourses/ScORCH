#
# Copyright 2015 WebMarcIT Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#



# This file contains functions to set and display layout
# fn_SetLayout
# fn_ShowTop
# fn_ShowLine
# fn_ShowJob 
# fn_ContextMenu


fn_SetLayout()
{
  # Define the bounds of the screen
  # The default screen layout is broken in columns to split up job names into
  # meaningfull groups
  #
  #  C1|     C2|        C3|        C4|
  #==========================================================
  #    |       |          |          |
  int_ScreenWidth=$(tput cols)
  int_Column1Width=4        # Selection number
  int_Column2Width=7        # System reference numner (like JIRA) or use ticket number
  int_Column3Width=10       # The service 
  int_Column4Width=10       # Action preformed / Plugin name
  int_Column5Width=10       # The Environment performed on
  int_Column6Width=10       # The Version / Release being actioned
  int_Column7Width=10       # The Version / Release being actioned
  cha_ColumnSep="|"
}


fn_ShowTop()
{
  # Display the name of the program and any interesting facts about the environment
  # ===============================================================================
  typeset local int_TitleWidth
  (( int_TitleWidth=${int_Column1Width} + ${int_Column2Width} ))
  clear

  # Check the current width of the screen
  # =====================================
  int_ScreenWidth=$(tput cols)
  (( int_DateLocation=${int_ScreenWidth} - ${int_TitleWidth} - ${int_Column2Width} - ${int_Column3Width} - 7 ))

  # Collect disk usage to display
  int_DiskUsage=$(df "${dir_Base}" | tail -1 | cut -d"%" -f1 | awk -F" " '{print $NF}')
  # Output the program name, the dispatcher PID and the date
  printf "%${int_TitleWidth}s ${cha_ColumnSep} %${int_Column2Width}s %${int_DateLocation}s\n" \
         "${str_ProgramName} [${str_ProgramVersion}]" \
         "D:xxxxx ${cha_ColumnSep} ${int_DiskUsage}% ${cha_ColumnSep}" \
         "$(date +'%D %T')"


  # Reset the Array for Jobs and States
  # ===================================
  unset arr_Jobs arr_States
}

fn_ShowLine()
{
  # Show a line of dashes unless a dirrent character is past or character and title is passed
  
  # Check if parameters have been past
  # ==================================
  typeset local cha_LineChar=${1:-"-"}
  typeset local str_LineTitle=${2:-"${cha_LineChar}"}

  # Find the width of the title
  # ===========================
  typeset local int_LineTitleWidth=$(echo ${str_LineTitle} | wc -c)

  # Set the number of characters required to the correct width
  # ==========================================================
  (( int_DisplayWidth = ${int_ScreenWidth}-${int_LineTitleWidth} - 4 ))
  printf "${dis_Reset}   ${str_LineTitle} %${int_DisplayWidth}s\n" | sed "s/ /${cha_LineChar}/g"
}

fn_ShowJobs()
{
  # Show job details for each job state past. The value passed is one or more directory names
  # =========================================================================================
  typeset local str_EachJobState=
  typeset local arr_JobList=
  typeset local str_StatusColour="${dis_Reset}"
  typeset local str_StatusColour=""
  typeset local int_Count=1

  # Due to the fact that directories may contain "spaces" so "cd" there first
  # =========================================================================
  cd "${dir_Job}"

  for str_EachJobState in $@ ; do
    str_StatusColour="${dis_Reset}"
    #lis_Jobs=$(ls "${dir_Base}/jobs/${str_EachJobState}/${str_JobPrefix}"* 2>/dev/null | tr ' ' '\\')
    #time lis_Jobs=$(cd "${dir_Job}" ; ls "${str_EachJobState}/${str_JobPrefix}"* 2>/dev/null) # pointless | tr ' ' '\\')

    # Use /dev/null redirect in case there are no files to report
    # ===========================================================
    lis_Jobs=$(ls -rt "${str_EachJobState}/${str_JobPrefix}"* 2>/dev/null| cut -d"/" -f2- )

    # If there are any jobs, handle them appropriately
    # ================================================
    if [ "${lis_Jobs}" ] ; then

      # Show a title line for the job state and make it display in uppercase
      # ====================================================================
      fn_ShowLine "-" "$(echo ${str_EachJobState} | tr [:lower:] [:upper:])"

      # If job state is failed or warning, set a line colour
      # ====================================================
      [[ "${str_EachJobState}" = "failed"  ]] && str_StatusColour="${dis_BRed}"
      #[[ "${str_EachJobState}" = "warning" ]] && str_StatusColour="${dis_BYellow}"

      # Display each job for each job state
      # ===================================
      for str_EachJob in ${lis_Jobs} ; do
        if [[ -r ${str_EachJob} ]] ; then
          str_Owner=" "
        else
          str_Owner="!"
        fi
        if [[ "$(echo ${str_EachJob}| cut -d"_" -f2)" ]] ; then
          # Show Ticket number if exists
          str_Ticket="$(echo ${str_EachJob}| cut -d"_" -f2)"
        else
          # Else show job number
          str_Ticket="$(echo ${str_EachJob}| cut -d"_" -f3)"
        fi
        #   colour number 
        printf "${dis_Reset}${str_StatusColour}%${int_Column1Width}s |"   "${int_Count}"
        printf " %${int_Column2Width}s|"   "${str_Ticket}"
        printf " %${int_Column3Width}s|"   "$(echo ${str_EachJob}| cut -d"_" -f4)"


        # slow way
        printf " %${int_Column4Width}s|"   "$(echo ${str_EachJob}| cut -d"_" -f5)"
        printf " %${int_Column5Width}s|"   "$(echo ${str_EachJob}| cut -d"_" -f6)"
        printf " %${int_Column6Width}s|"   "$(echo ${str_EachJob}| cut -d"_" -f7)"
        #echo ${str_EachJob} 
        tail -1 "${dir_Log}"/${str_EachJob}.log 2>/dev/null || echo "File access issue"


        # quicker way
        #printf " %${int_Column4Width}s| %${int_Column5Width}s| %${int_Column6Width}s|${dis_Reset}\n" $(echo ${str_EachJob} | cut -d"_" -f5-) | sed 's/_/ /g'

        # Load global arrays for later use
        arr_Jobs[${int_Count}]="${str_EachJob}"
        arr_States[${int_Count}]="${str_EachJobState}"
        (( int_Count+=1 ))
      done
    fi
  done
  #echo "Was in pwd $(pwd)"
  cd "${dir_Run}"
  #echo "Back in pwd $(pwd)"
  #sleep 3
}

fn_ShowTasks()
{
  # This functions simply displays the list of tasks that will be run
  # If a value was passed assume that was the job for which to show the tasks
  typeset local str_JobName=${1}
  typeset local int_Answer=

  fn_ShowTop
  fn_ShowLine

  printf "\n Display tasks for which job(s)?\n\n"

  fn_ShowJobs superceeded starting failed running queued pending new completed
  fn_ShowLine
  fn_GetAnswer range
  str_Answer=$(fn_Range "${str_Answer}")
  if [ ${str_Answer} != "x" ] ; then
    for int_Answer in ${str_Answer} ; do
      printf "\n\n${int_Answer}:  "
      ls "${dir_Job}"/${arr_States[${int_Answer}]}/${arr_Jobs[${int_Answer}]}
      printf "\n"
      grep "#${str_ProgramName}_Task" "${dir_Job}"/${arr_States[${int_Answer}]}/${arr_Jobs[${int_Answer}]} | rev | cut -d">" -f4- | rev | more
    done
  else
    echo "Nothing chosen"
  fi
  
  fn_PressEnter
}

fn_ContextMenu()
{
  # A context-based menu based on the state of jobs
  # Used in two ways....
  #    specific mode (where a directory name is passed)
  # and
  #    generic mode (where is caters for all directories)
 
  typeset local str_State=${1:-}
  
  typeset local b_QueuedJobs=
  typeset local b_FailedJobs=
  typeset local b_NewJobs=
  typeset local b_RunningJobs=

  if [[ "${str_State}" ]] ; then
    # Specific Mode
    printf " ${dis_ULOn}E${dis_ULOff}dit | "
    case ${str_State} in
      queued  ) b_QueuedJobs=1 ;;
      failed  ) b_FailedJobs=1 ;;
      new     ) b_NewJobs=1 ;;
      running ) b_RunningJobs=1 ;;
    esac
  else
    # Generic Mode
    [[ "$(echo ${arr_States[@]} | grep -i queued)"  ]] && b_QueuedJobs=1 
    [[ "$(echo ${arr_States[@]} | grep -i running)" ]] && b_RunningJobs=1 
    [[ "$(echo ${arr_States[@]} | grep -i new)"     ]] && b_NewJobs=1 
    [[ "$(echo ${arr_States[@]} | grep -i failed)"  ]] && b_FailedJobs=1 
  fi
  
  printf "\n\n${dis_Reset}"
  printf " ${dis_ULOn}N${dis_ULOff}ew | "
  [[ "${b_QueuedJobs}" ]]  && printf "${dis_ULOn}U${dis_ULOff}nqueue | "
  [[ "${b_RunningJobs}" ]] && printf "${dis_ULOn}P${dis_ULOff}ause | "
  [[ "${b_FailedJobs}" ]]  && printf "${dis_ULOn}R${dis_ULOff}esume | "
  [[ "${b_FailedJobs}" ]]  && [ "${str_State}" ] && printf "${dis_ULOn}F${dis_ULOff}IP | S${dis_ULOn}k${dis_ULOff}ip"
  [[ "${b_NewJobs}" ]]     && printf "${dis_ULOn}Q${dis_ULOff}ueue | "
  [[ "${str_State}" ]]     || printf "${dis_ULOn}M${dis_ULOff}OTD | "
  [[ "${arr_Jobs[1]}" ]]   && printf "${dis_ULOn}T${dis_ULOff}asks | "
  printf "e${dis_ULOn}X${dis_ULOff}it\n"
}


# End
