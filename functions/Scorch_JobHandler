#
# Copyright 2015 WebMarcIT Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# fn_NewJob
# fn_JobHeader()
# fn_CheckTask()
# fn_JobFooter()
# fn_NewJob()
# fn_GetRequest()
# fn_ProcessRequest()
# fn_GetJobID()
# fn_ExtractPairs()
# fn_Transition()

fn_JobHeader()
{
  # Function to create and initialise the job file. This job file is incomplete without a Footer
  # Tasks are added via the "Task" function which is made available to the plugin
  #
  # The file to be created is passed as a variable

  typeset local file_Job=${1}
  echo "Creating ${file_Job}"
  #touch "${file_Job}"
  fn_CreateFile "${file_Job}" blank
  cat > "${file_Job}" << EOF
#!/bin/bash

    #####  ####  ####  #####   #### #    #
   #     #     #    # #    # #     #    #
   ###  #     #    # #####  #     ######
     # #     #    # #   #  #     #    #
#####  ####  ####  #    #  #### #    #

# Created: $(date)
# By: $(whoami)
# Using: ${str_ProgramName}[${str_ProgramVersion}]
#

# Audit
str_StartTime="\$(date +%s)"
str_Owner=$(whoami)

# Job settings
int_JobID=${int_JobID}
int_ResumePoint=
int_Last=0
str_JobName="\$(basename "\$0")"


# Directory locations
dir_Job="${dir_Job}"
dir_Running="${dir_Running}"
dir_Failed="${dir_Failed}"
dir_Completed="${dir_Completed}"
dir_Starting="${dir_Starting}"
file_Log="${dir_Var}/log/\${str_JobName}.log"
LOCK="${file_JobLock}.${SYSTEM}_${str_EachENVIRONMENT}"

[[ ! -f "\${dir_Starting}"/\${str_JobName} ]] && echo "This is a ${str_ProgramName} script. Do not run these scripts manually unless you know what you are doing." && exit 1

[[ -w "\${dir_Starting}"/\${str_JobName} ]] && mv "\${dir_Starting}"/\${str_JobName} "\${dir_Running}"/.

# Check Tasks
fn_CheckTask()
{
  typeset local int_RC=\${1}
  typeset local int_Task=\${2}

  if [ \${int_RC} -ne 0 ] ; then
    mv "\${dir_Running}"/\${str_JobName} "\${dir_Failed}"/.
    echo "+\$(date "+%D %T") Failed:\${int_Task}" >> "\${dir_Failed}"/\${str_JobName}
    echo "Failed:Resume point:\${int_Task}" >> "\${file_Log}"
    rm "\${LOCK}"
    exit 1
  else
    echo "Task \${int_Task} completed \$(date)"
    echo "\$(date "+%D %T"):Completed:\${int_Task}/\${int_Last}" >> "\${file_Log}"
  fi
}

EOF

}

fn_JobFooter()
{
  # Function to add the processing power to a job file. This requires a JobHeader to have been run
  #
  # The file to be appended to is passed as a variable

  typeset local file_Job=${1}
  (( int_TaskCount-=1 ))

  # echo "Adding footer to ${file_Job}"
  cat >> "${file_Job}" << EOF

int_StartTask=\${int_ResumePoint:-1}
int_Last=${int_TaskCount}

while [ \${int_StartTask} -le \${int_Last} ] ; do
  fn_Task_\${int_StartTask}
  (( int_StartTask+=1 ))
done

mv "\${dir_Running}"/\${str_JobName} "\${dir_Completed}"/.
rm "\${LOCK}"

int_FailureCount=\$(grep "^+Failed:" "\${dir_Completed}"/\${str_JobName} | wc -l)
(( int_FailureCount+=0 ))
echo "\$(date "+%D %T") Tasks Run[\${int_Last}] Failures[\${int_FailureCount}]" >> "\${file_Log}"

exit 0

EOF

  echo "# Template Used" >> "${file_Job}"
  cat "${file_Request}" >> "${file_Job}"
  echo "=============================" >> "${file_Job}"
  chmod 754 "${file_Job}"

}

fn_NewJob()
{
  fn_ShowTop
  fn_ShowLine "-"
  fn_LoadFunctions ${str_Plugins} "SP_"

  fn_GetRequest
  fn_ProcessRequest

  rm "${file_Request}"
}

fn_GetRequest()
{
  # Receive the request from a file or interactively
  typeset local str_File="${1:-}"
  typeset local str_Line=""

  # global tmp file
  file_Request=${dir_Tmp}/${str_ProgramName}.$$
  #echo ${file_Request}

  if [ ! -z "${str_File}" ] ; then
    echo "$(date +'%D %T'): Processing file:${file_Request}"
    while read str_Line : ; do
      echo ${str_Line} | grep ":" >> ${file_Request}
    done < ${str_File}
  else
    printf "\n help <plugin>    at any time for additional parameters\n\n"
    printf " Please enter the request below.\n To complete the request is use a fullstop on a newline:\n\n"
    while [[ "${str_Line}" != "." ]] ; do
      read str_Line
      if [[  "${str_Line}" =~ "help" ]] ; then
        typeset local str_Help=${str_Line#help }
        if [[ "${str_Line}" ]] ; then
          echo "==SYSTEM============="
		  declare -f fn_ExtractPairs | grep "GetVar -pattern"
		  echo "==CUSTOM============="
          declare -f "SP_${str_Help}" | grep "GetVar "
          echo "==============="
        fi
      else
        printf "${str_Line}" | grep ":" >> "${file_Request}"
      fi
    done
    #cat "${file_Request}"
  fi
}

fn_ProcessRequest()
{
  typeset local int_JobCount=1
  fn_GetJobID
  fn_ExtractPairs
  
  [[ "${b_Debug}" ]] && echo "Action: ${ACTION}"
  for str_EachACTION in ${ACTION} ; do
    for str_EachENVIRONMENT in ${ENVIRONMENT} ; do
      #echo "${str_EachACTION} ${str_EachENVIRONMENT}"

	  int_TaskCount=0
      file_Job="${dir_New}"/${str_JobPrefix}${TICKET}_${int_JobID}.${int_JobCount}_${SYSTEM}_${str_EachENVIRONMENT}_${str_EachACTION}_${RELEASE}
      echo "$(date +%s)" > "${dir_Log}"/$(basename "${file_Job}").log

      fn_JobHeader "${file_Job}"
      Task "date +$s ; echo PID:\$$"

      echo "Adding Tasks from Plugin: ${SYSTEM}_${str_EachACTION}" >> "${dir_Log}"/$(basename "${file_Job}").log
      #echo "Run SP_${SYSTEM}_${str_EachACTION}"
      eval "SP_${SYSTEM}_${str_EachACTION}"
      if [[ $? -ne 0 ]] ; then
        echo "Error in plugin ($(date +'%D %T'))" >> "${dir_Log}"/$(basename "${file_Job}").log
		fn_PressEnter
        exit 1
      fi

      fn_JobFooter "${file_Job}"
       echo "Job created by $(whoami) ($(date +'%D %T'))" >> "${dir_Log}"/$(basename "${file_Job}").log
      (( int_JobCount+=1 ))

      # If there is already another job in a failed state, mv that failed job to the superceeded directory
      if [[ $(ls "${dir_Failed}"/${str_JobPrefix}*_${SYSTEM}_${ENVIRONMENT}_${str_EachACTION}_* 2>/dev/null)  ]] ; then
        mv "${dir_Failed}"/${str_JobPrefix}*_${SYSTEM}_${ENVIRONMENT}_${str_EachACTION}_* "${dir_Superceeded}"/.
      fi
    done
  done
}

fn_GetJobID()
{
  file_JobID="${dir_Var}"/JobID
  [[ ! -f "${file_JobID}" ]] && echo "BROKEN" && fn_CreateFile "${file_JobID}"
  
  typeset local file_JobIDLock="${file_JobID}".lock

  if ( set -o noclobber; > "${file_JobIDLock}") 2> /dev/null ; then
    if [ -r "${file_JobID}" ] ; then
      int_JobID=$(cat "${file_JobID}")
    else
      int_JobID=0
    fi
    (( int_JobID+=1 ))
    echo ${int_JobID} > "${file_JobID}"
    rm -f "${file_JobIDLock}"
  else
    echo "Could not get exclusive lock"
    exit 1
  fi
}

fn_ExtractPairs()
{
  GetVar -pattern "System"  -name SYSTEM             -default "LOCAL"
  GetVar -pattern "Action"  -name ACTION      -list
  GetVar -pattern "Release" -name RELEASE            -default "NO-REL"
  GetVar -pattern "Enviro"  -name ENVIRONMENT -list  -default "NO-ENV"
  GetVar -pattern "Type"    -name TYPE               -default ""
  GetVar -pattern "Ticket"  -name TICKET             -default ""
}

Task()
{
  # Exception to the naming convention is Task. This is used in plugins by the users
  # 
  # This function will Add Tasks to a scorch Job
  # ================================================================================
  int_TaskCount=${int_TaskCount:-0}
  str_Task1=${1}
  str_OR=${2:-}
  str_Task2=${2}

#  printf "fn_Task_${int_TaskCount}()\n{\n  ${str_Task1}\t>> \"\${file_Log}\" 2>&1 \t#${str_ProgramName}_Task\n  fn_CheckTask \$? \${int_StartTask}\n}\n\n" >> "${file_Job}"
  printf "fn_Task_${int_TaskCount}(){ ${str_Task1}\t>> \"\${file_Log}\" 2>&1 ; fn_CheckTask \$? \${int_StartTask};}\t#${str_ProgramName}_Task\n" >> "${file_Job}"

  (( int_TaskCount+=1 ))

}

GetVar()
{
  # Exception to the naming convention is GetVar. This is used in plugins by users
  #
  # This function is used to set global variables with value pairs from templates
  # =============================================================================
  #
  # Given    KEYNAME : VALUE
  # In a template, 
  # 
  # -label  "<key name>"          specifies the key name search string
  # -name   "<variable name>"  the global variable to assign the VALUE to
  # -c                         Enforce case in the label pattern
  # -default "<value>"         Set a default is no value passed
  # -list                      Expect a list of values into an array by space or comma
  #
  # awk 20070501 does not allow ignorecase so dont worry if it doesnt work
  # Examples
  #
  # GetVar -pattern "data label" -name DATA_LABEL -d "None"
  typeset local str_Pattern=
  typeset local str_Name=
  typeset local str_Value=
  typeset local str_Default=
  typeset local b_IgnoreCase=1
  typeset local b_List=
  
  if [ $# -ne 0 ] ; then
    while [ $# -gt 0 ] ; do
      case "${1}" in
        -pattern ) shift ; str_Pattern="${1}" ;;
        -name    ) shift ; str_Name="${1}"    ;;
        -default ) shift ; str_Default="${1}" ;;
        -c       )         b_IgnoreCase=0     ;;
        -list    )         b_List=1           ;;
      esac
      shift
    done
  fi

  # Awk is a pain if the items are in a list so handle lists separately
  # ===================================================================
  if [ "${b_List}" ] ; then
    #echo "ListPattern : ${str_Pattern} Name: ${str_Name}"
    str_Value="$(awk 'BEGIN {
       FS=":"
       IGNORECASE='"$b_IgnoreCase"' }
       $1 ~ /^ *'"$str_Pattern"'/ {print $2}'       "${file_Request}" | sed -e 's/[,&]/ /g' )"
  else
    str_Value="$(awk 'BEGIN {
       FS=":"
       IGNORECASE='"$b_IgnoreCase"' }
       $1 ~ /^ *'"$str_Pattern"'/ {gsub (/[ \t]+/, "");
         $2=$2;
         print $2}'       "${file_Request}" )" 
  fi

  # If a value hasnt been found or is empty, use the default if one is set
  # ======================================================================
  #echo "String is ${str_Value}"
  [[ "${str_Value}" ]] || str_Value=${str_Default}
  eval "${str_Name}=\"${str_Value}\""
  #fn_PressEnter

}

fn_Transition()
{
  # Transition a job to a new state
  # ===============================

  typeset local str_Transition="${1}"

  fn_ShowTop
  printf "\n\nSelect jobs to move to $1 state\n\n"

  case ${str_Transition} in

    # Jobs requiring the dispatcher
    queue   ) fn_ShowJobs new failed   ; fn_CheckDispatcher ; str_Target="${dir_Queued}" ;;
    resume  ) fn_ShowJobs     failed   ; fn_CheckDispatcher ; str_Target="${dir_Queued}" ;;

    # Jobs not requiring the dispatcher
    delete  ) fn_ShowJobs new          ; str_Target="${dir_Deleted}" ;;
    unqueue ) fn_ShowJobs starting queued ; str_Target="${dir_New}"     ;;

  esac

  #echo "mv x to ${str_Target}"
  fn_ShowLine
  fn_GetAnswer range
  arr_Answer=$(fn_Range ${str_Answer})
  # echo ">${arr_Answer}<"
  if [ "${arr_Answer}" != "x " ] ; then
    for str_EachAnswer in ${arr_Answer} ; do
	  fn_Audit "${dir_Job}"/${arr_States[${str_EachAnswer}]}/${arr_Jobs[${str_EachAnswer}]} "$(basename ${str_Target})"
      mv "${dir_Job}"/${arr_States[${str_EachAnswer}]}/${arr_Jobs[${str_EachAnswer}]} "${str_Target}"/.
    done
  fi
}

#     case ${char_Choice} in

#      q | Q ) fn_Audit "${file_Job}" queued
#              fn_UpdateResumePoint "${file_Job}" 0

#             mv "${file_Job}" "${dir_Queued}"  ;;

#	  r | R ) fn_Audit "${file_Job}" "resumed task:$(fn_GetResumePoint ${file_Job} ) "
#              fn_UpdateResumePoint "${file_Job}" $(fn_GetResumePoint ${file_Job})
#              mv "${file_Job}" "${dir_Queued}"  ;;
