#
# Copyright 2015 WebMarcIT Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# fn_NewJob
# fn_GetRequest
# fn_JobHeader
# fn_JobFooter
# fn_Transition
# Task
# GetVar

fn_JobHeader()
{
  # Function to create and initialise the job file. This job file is incomplete without a Footer
  # Tasks are added via the "Task" function which is made available to the plugin
  #
  # The file to be created is passed as a variable

  typeset local file_Job=${1}
  echo "Creating ${dir_New}/${file_Job}"
  touch "${dir_New}"/${file_Job}

  cat > "${dir_New}"/${file_Job} << EOF
#!/bin/bash

    #####  ####  ####  #####   #### #    #
   #     #     #    # #    # #     #    #
   ###  #     #    # #####  #     ######
     # #     #    # #   #  #     #    #
#####  ####  ####  #    #  #### #    #

# Created: $(date)
# By: $(whoami)
# Using: ${str_ProgramName}[${str_ProgramVersion}]
#

# Audit
str_StartTime="\$(date +%s)"
str_Owner=$(whoami)

# Job settings
int_ResumePoint=
str_JobName="\$(basename \$0)"

# Directory locations
dir_Job="${dir_Job}"
dir_Running="${dir_Running}"
dir_Failed="${dir_Failed}"
dir_Completed="${dir_Completed}"
dir_Starting="${dir_Starting}"
file_Log="${dir_Var}/log/\${str_JobName}.log"


[[ ! -f "\${dir_Starting}"/\${str_JobName} ]] && echo "This is a ${str_ProgramName} script. Do not run these scripts manually unless you know what you are doing." && exit 1

[[ -w "\${dir_Starting}"/\${str_JobName} ]] && mv "\${dir_Starting}"/\${str_JobName} "\${dir_Running}"/.

# Check Tasks
fn_CheckTask()
{
  typeset local int_RC=\${1}
  typeset local int_Task=\${2}

  if [ \${int_RC} -ne 0 ] ; then
    echo failed
    mv \${dir_Running}/\${dir_JobName} \${dir_Failed}/.
  else
    echo "Task \${int_Task} completed \$(date)"
  fi
}

EOF

}

fn_JobFooter()
{
  # Function to add the processing power to a job file. This requires a JobHeader to have been run
  #
  # The file to be appended to is passed as a variable

  typeset local file_Job=${1}
  echo "Adding footer to ${dir_New}/${file_Job}"
  cat >> "${dir_New}"/${file_Job} << EOF

exit 0
EOF
}

fn_NewJob()
{
  echo "Initailise plugins"

  fn_LoadFunctions ${str_Plugins} "SP_"
  fn_GetRequest
  fn_ProcessRequest

  echo "Header"
  fn_JobHeader ${str_JobPrefix}file
  echo "Add Tasks"
  echo "Footer"
  fn_JobFooter ${str_JobPrefix}file

}

fn_GetRequest()
{
  # Receive the request from a file or interactively
  typeset local str_File="${1:-}"
  typeset local str_Line=""

  # global tmp file
  file_Request=${dir_Tmp}/${str_ProgramName}.$$
  echo ${file_Request}

  if [ ! -z "${str_File}" ] ; then
    echo "stub:file in fn_GetRequest"
  else
    while [[ "${str_Line}" != "." ]] ; do
      read str_Line
      printf "${str_Line}" | grep ":" >> "${file_Request}"
    done
    echo "stub output:"
    cat "${file_Request}"
  fi

  printf "\n Please enter the request. When the request is complete use a fullstop on a newline.\n\n"
}

fn_ProcessRequest()
{
  echo "stub:fn_ProcessRequest"
  sleep 5
}

fn_CheckDispatcher()
{
  # Check Dispatcher
  echo "stub: fn_CheckDispatcher"
}

Task()
{
  # Exception to the naming convention is Task. This is used in plugins by the users
  # 
  # This function will Add Tasks to a scorch Job
  # ================================================================================
  echo " "
  str_Task1=${1}
  str_OR=${2:-}
  str_Task2=${2}

}

GetVar()
{
  # Exception to the naming convention is GetVar. This is used in plugins by users
  #
  # This function is used to set global variables with value pairs from templates
  # =============================================================================
  #
  # Given    KEYNAME : VALUE
  # In a template, 
  # 
  # -label  "<key name>"          specifies the key name search string
  # -name   "<variable name>"  the global variable to assign the VALUE to
  # -c                         Enforce case in the label pattern
  # -default "<value>"         Set a default is no value passed
  # -list                      Expect a list of values into an array by space or comma
  #
  # Examples
  #
  # GetVar -label "data label" -name DATA_LABEL -d "None"
  typeset local str_Pattern=
  typeset local str_Name=
  typeset local str_Value=
  typeset local str_Default=
  typeset local b_IgnoreCase=1
  typeset local b_List=
  
  if [ $# -ne 0 ] ; then
    while [ $# -gt 0 ] ; do
      case "${1}" in
        -pattern   ) shift ; str_Pattern="${1}" ;;
        -name    ) shift ; str_Name="${1}"    ;;
        -default ) shift ; str_Default="${1}" ;;
        -c       )         b_IgnoreCase=0     ;;
        -list    )         b_List=1           ;;
      esac
      shift
    done
  fi


  # Awk is a pain if the items are in a list so handle lists seperately
  # ===================================================================
  if [ "${b_List}" ] ; then
    str_Value="$(awk 'BEGIN {
       FS=":"
       IGNORECASE='"$b_IgnoreCase"' }
       $1 ~ /^ *'"$str_Pattern"'/ {print $2}'       "${file_Template}" | sed -e 's/[,&]/ /g' )"
  else
    str_Value=$(awk 'BEGIN {
       FS=":"
       IGNORECASE='"$b_IgnoreCase"' }
       $1 ~ /^ *'"$str_Pattern"'/ {gsub (/[ \t]+/, "");
         $2=$2;
         print $2}'       "${file_Template}" ) 
  fi

  # If a value hasnt been found or is empty, use the default if one is set
  # ======================================================================
  [[ "${str_Value}" ]] || str_Value=${str_Default}
  eval "${str_Name}=\"${str_Value}\""

}

fn_Transition()
{
  # Transition a job to a new state
  # ===============================

  typeset local str_Transition="${1}"

  echo "Moving to $1"
  sleep 2
  fn_ShowTop

  case ${str_Transition} in

    # Jobs requiring the dispatcher
    queue   ) fn_ShowJobs new failed ; fn_CheckDispatcher ;;
    resume  ) fn_ShowJobs     failed ; fn_CheckDispatcher ;;

    # Jobs not requiring the dispatcher
    delete  ) fn_ShowJobs new         ;;
    unqueue ) fn_ShowJobs start queue ;;

  esac

  fn_ShowLine
}
