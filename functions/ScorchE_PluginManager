#
# Copyright 2016 WebMarcIT Ltd
#
# Unauthorised copying of this file, via any medium is strictly prohibited
# This is the proprietary software of WebMarcIT Ltd
# Written by marc@webmarcit.com
## fnE_PluginManagerMenu()

fnE_PluginManagerMenu()
{
  typeset local char_Choice=
  fn_ShowTop
  fn_ShowLine "-" "Plugin Manager"
  echo ""

  find -L ${dir_Plugins} -name "sp_*"
  find -L ${dir_Plugins} -name "SP_*" | ${cmd_AWK} \
      -v            state=${str_State} \
      -v             user=${str_User} \
      -v          linenum=${int_Count} \
      -v          dir_Log="${dir_Log}" \
      -v       dir_Active="${dir_Active}" \
      -v       file_Cache="${file_Cache}" \
      -v           Colour=${str_StatusColour} \
      -v  int_ScreenWidth=${int_ScreenWidth} \
      -v int_Column1Width=${int_Column1Width} \
      -v int_Column2Width=${int_Column2Width} \
      -v int_Column3Width=${int_Column3Width} \
      -v int_Column4Width=${int_Column4Width} \
      -v int_Column5Width=${int_Column5Width} \
      -v int_Column6Width=${int_Column6Width} \
      -v int_MaxShown=${int_MaxShown} 'BEGIN {
       FS = "_"
    }
    linenum <= int_MaxShown {
      printf Colour

      ## Check Owner of job
      ##system("echo " user
      ##system("echo grep ^str_Owner= "dir_Active"/$(basename "$0")")
      ##system("if [[ \"$(grep ^str_Owner="user" "dir_Active"/$(basename "$0") | cut -d"=" -f2-)\" ]] ; then printf \"*\" ; else printf \" \" ; fi")
      system("test -r \""dir_Active"/$(basename "$0").rules\" && printf \"R\"  || printf \" \"")
      printf "%3s", linenum
      system("test -r \""dir_Active"/$(basename "$0").pause\" && printf \"P|\" || printf \" |\"")

      if ( $2 != "" ) {
        printf "%7s|", $2
      }
      else {
        printf "%7s|", substr($3,1,7)
      }
      int_LogWidth=int_ScreenWidth - 7 - int_Column1Width - int_Column2Width - int_Column3Width \
                   - int_Column4Width  - int_Column5Width 
      ##printf "${dis_Reset}${str_StatusColour}%${int_Column1Width}s "   "${int_Count}${str_ID}"
      printf "%"int_Column3Width"s|%"int_Column4Width"s|%"int_Column5Width"s|",$4,$5,$6

      if ( state == "running" ) {
#       system("date -d \"1970-01-01 + $seconds seconds\" \"+%Hh%Mm%Ss\"")
#       printf '%02dh:%02dm:%02ds\n' $(($secs/3600)) $(($secs%3600/60)) $(($secs%60))
# Looking for the last AUDIT:START point
        cmd = "grep ^AUDIT:START "dir_Log"/$(basename "$0").log | tail -1 | cut -d: -f3"
        cmd | getline starttime
        cmd = "date +%s"
        cmd | getline currenttime
        secs = currenttime - starttime
        close(cmd)
        printf "%02d:%02d:%02d", secs/3600, secs%3600/60, secs%60
        printf "|"
        int_LogWidth = int_LogWidth - 9
      }
      system("echo $(tail -1 "dir_Log"/$(basename "$0").log 2>/dev/null | tr -cd \"\\011\\012\\040-\\254\" | cut -c1-"int_LogWidth")")
#     system("echo $(tail -1 "dir_Log"/$(basename "$0").log 2>/dev/null)")
      system("echo arr_States["linenum"]="state" >> "file_Cache)
      system("echo arr_Jobs["linenum"]=$(basename "$0") >> "file_Cache)

      linenum++
    }
    END {
      system("echo int_Count="linenum" >> "file_Cache )
    }'
    ##. ${file_Cache}
#       cat "${file_Cache}"
#    [[ -r "${file_Cache}" ]] && . "${file_Cache}" && rm "${file_Cache}"


  fn_ShowPlugins
  fn_ShowLine "-"

  printf "\n\n "
  printf " ${dis_ULOn}O${dis_ULOff}N | O${dis_ULOn}F${dis_ULOff}F  | e${dis_ULOn}X${dis_ULOff}it : "

  read ${str_Quick} -t 60 char_Choice

  case ${char_Choice} in

          a | A ) fn_ShowJobs2 failed running starting pending queued new
               fn_ShowLine
               fn_GetAnswer
               echo "PARENT:${arr_Jobs[${str_Answer}]}" >> ${file_ActiveJob}.rules ;;

          d | D ) rm ${file_ActiveJob}.rules
                  # if link to active job in pending mv job to queued
                           ;;

          ## Edit job
          x | X ) return 0 ;;
          *     ) return 0 ;;
  esac

}
readonly -f fnE_PluginManagerMenu

